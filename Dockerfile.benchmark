# Build stage - compile for Linux
FROM rust:1.82-alpine AS builder
RUN apk add --no-cache musl-dev openssl-dev pkgconfig
WORKDIR /app

# Copy only necessary files for building
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY examples ./examples
COPY ../websocket_builder ../websocket_builder

# Build with optimizations for Linux
RUN RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C codegen-units=1"     cargo build --release --example 01_minimal_relay --features axum

# Runtime stage
FROM alpine:3.18
RUN apk add --no-cache libgcc
WORKDIR /app

# Copy the Linux binary from builder
COPY --from=builder /app/target/release/examples/01_minimal_relay /app/minimal_relay
RUN mkdir -p /app/relay-data

EXPOSE 8080
ENV RELAY_DATA_DIR=/app/relay-data
ENV RUST_LOG=nostr_lmdb=info,relay_builder=info
ENTRYPOINT ["/app/minimal_relay"]
